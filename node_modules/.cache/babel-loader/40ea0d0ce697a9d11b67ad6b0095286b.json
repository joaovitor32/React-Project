{"ast":null,"code":"import _slicedToArray from \"/home/buzina/\\xC1rea de Trabalho/reactproject/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/buzina/\\xC1rea de Trabalho/reactproject/src/shared/components/FormElements/ImageUpload.js\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport Button from './Button';\nimport './ImageUpload.css';\n\nconst ImageUpload = props => {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        file = _useState2[0],\n        setFile = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        previewUrl = _useState4[0],\n        setPreviewUrl = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isValid = _useState6[0],\n        setIsValid = _useState6[1];\n\n  const filePickerRef = useRef();\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    const fileReader = new FileReader();\n\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  const pickedHandler = event => {\n    let pickedFile;\n    let fileIsValid = isValid;\n\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n\n  return React.createElement(\"div\", {\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: props.id,\n    ref: filePickerRef,\n    style: {\n      display: 'none'\n    },\n    type: \"file\",\n    accept: \".jpg,.png,.jpeg\",\n    onChange: pickedHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: `image-upload ${props.center && 'center'}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"image-upload__preview\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, previewUrl && React.createElement(\"img\", {\n    src: previewUrl,\n    alt: \"Preview\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), !previewUrl && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Please pick an image.\")), React.createElement(Button, {\n    type: \"button\",\n    onClick: pickImageHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"PICK IMAGE\")), !isValid && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, props.errorText));\n};\n\nexport default ImageUpload;","map":{"version":3,"sources":["/home/buzina/Área de Trabalho/reactproject/src/shared/components/FormElements/ImageUpload.js"],"names":["React","useRef","useState","useEffect","Button","ImageUpload","props","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","fileReader","FileReader","onload","result","readAsDataURL","pickedHandler","event","pickedFile","fileIsValid","target","files","length","onInput","id","pickImageHandler","current","click","display","center","errorText"],"mappings":"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","sourcesContent":["import React,{useRef, useState,useEffect} from 'react';\nimport Button from './Button'\nimport './ImageUpload.css'\n\nconst ImageUpload = props => {\n    const [file, setFile] = useState();\n    const [previewUrl, setPreviewUrl] = useState();\n    const [isValid, setIsValid] = useState(false);\n  \n    const filePickerRef = useRef();\n  \n    useEffect(() => {\n      if (!file) {\n        return;\n      }\n      const fileReader = new FileReader();\n      fileReader.onload = () => {\n        setPreviewUrl(fileReader.result);\n      };\n      fileReader.readAsDataURL(file);\n    }, [file]);\n  \n    const pickedHandler = event => {\n      let pickedFile;\n      let fileIsValid = isValid;\n      if (event.target.files && event.target.files.length === 1) {\n        pickedFile = event.target.files[0];\n        setFile(pickedFile);\n        setIsValid(true);\n        fileIsValid = true;\n      } else {\n        setIsValid(false);\n        fileIsValid = false;\n      }\n      props.onInput(props.id, pickedFile, fileIsValid);\n    };\n  \n    const pickImageHandler = () => {\n      filePickerRef.current.click();\n    };\n  \n    return (\n      <div className=\"form-control\">\n        <input\n          id={props.id}\n          ref={filePickerRef}\n          style={{ display: 'none' }}\n          type=\"file\"\n          accept=\".jpg,.png,.jpeg\"\n          onChange={pickedHandler}\n        />\n        <div className={`image-upload ${props.center && 'center'}`}>\n          <div className=\"image-upload__preview\">\n            {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n            {!previewUrl && <p>Please pick an image.</p>}\n          </div>\n          <Button type=\"button\" onClick={pickImageHandler}>\n            PICK IMAGE\n          </Button>\n        </div>\n        {!isValid && <p>{props.errorText}</p>}\n      </div>\n    );\n  };\n  \n  export default ImageUpload;"]},"metadata":{},"sourceType":"module"}
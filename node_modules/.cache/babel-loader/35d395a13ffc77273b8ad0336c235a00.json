{"ast":null,"code":"import _slicedToArray from \"/home/buzina/\\xC1rea de Trabalho/reactproject/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/buzina/\\xC1rea de Trabalho/reactproject/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/buzina/\\xC1rea de Trabalho/reactproject/src/shared/components/FormElements/Input.js\";\nimport React, { useReducer } from 'react';\nimport { validate } from '../util/Validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return _objectSpread({}, state, {\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const _useReducer = useReducer(inputReducer, {\n    value: '',\n    isValid: false\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        inputState = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element = props.element === 'input' ? React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }) : React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  });\n  return React.createElement(\"div\", {\n    class: `form-control ${!inputState.isValud && 'form-control--invalid'}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: props.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, props.label), element, !inputState.isValid && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, props.errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/buzina/Área de Trabalho/reactproject/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","validate","inputReducer","state","action","type","value","val","isValid","validators","Input","props","inputState","dispatch","changeHandler","event","target","touchHandler","element","id","placeholder","rows","isValud","label","errorText"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,UAAd,QAA+B,OAA/B;AAEA,SAAQC,QAAR,QAAuB,oBAAvB;AACA,OAAO,aAAP;;AAEA,MAAMC,YAAY,GAAC,CAACC,KAAD,EAAOC,MAAP,KAAgB;AAC/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,QAAL;AACI,+BACOF,KADP;AAEIG,QAAAA,KAAK,EAACF,MAAM,CAACG,GAFjB;AAGIC,QAAAA,OAAO,EAACP,QAAQ,CAACG,MAAM,CAACG,GAAR,EAAYH,MAAM,CAACK,UAAnB;AAHpB;;AAKJ;AACI,aAAON,KAAP;AARR;AAUH,CAXD;;AAaA,MAAMO,KAAK,GAACC,KAAK,IAAE;AAAA,sBAEaX,UAAU,CAACE,YAAD,EAAc;AAACI,IAAAA,KAAK,EAAC,EAAP;AAAUE,IAAAA,OAAO,EAAC;AAAlB,GAAd,CAFvB;AAAA;AAAA,QAERI,UAFQ;AAAA,QAEGC,QAFH;;AAIf,QAAMC,aAAa,GAACC,KAAK,IAAE;AACvBF,IAAAA,QAAQ,CAAC;AACLR,MAAAA,IAAI,EAAC,QADA;AAELE,MAAAA,GAAG,EAACQ,KAAK,CAACC,MAAN,CAAaV,KAFZ;AAGLG,MAAAA,UAAU,EAACE,KAAK,CAACF;AAHZ,KAAD,CAAR;AAKH,GAND;;AAQA,QAAMQ,YAAY,GAAC,MAAI;AACnBJ,IAAAA,QAAQ,CAAC;AACLR,MAAAA,IAAI,EAAC;AADA,KAAD,CAAR;AAGH,GAJD;;AAMA,QAAMa,OAAO,GAACP,KAAK,CAACO,OAAN,KAAgB,OAAhB,GACV;AACI,IAAA,EAAE,EAAEP,KAAK,CAACQ,EADd;AAEI,IAAA,IAAI,EAAER,KAAK,CAACN,IAFhB;AAGI,IAAA,WAAW,EAAEM,KAAK,CAACS,WAHvB;AAII,IAAA,QAAQ,EAAEN,aAJd;AAKI,IAAA,MAAM,EAAEG,YALZ;AAMI,IAAA,KAAK,EAAEL,UAAU,CAACN,KANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADU,GAUV;AACI,IAAA,EAAE,EAAEK,KAAK,CAACQ,EADd;AAEI,IAAA,IAAI,EAAER,KAAK,CAACU,IAAN,IAAY,CAFtB;AAGI,IAAA,QAAQ,EAAEP,aAHd;AAII,IAAA,MAAM,EAAEG,YAJZ;AAKI,IAAA,KAAK,EAAEL,UAAU,CAACN,KALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ;AAkBI,SACA;AAAK,IAAA,KAAK,EAAG,gBAAe,CAACM,UAAU,CAACU,OAAZ,IAAwB,uBAAwB,EAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAEX,KAAK,CAACQ,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BR,KAAK,CAACY,KAAjC,CADJ,EAEKL,OAFL,EAGK,CAACN,UAAU,CAACJ,OAAZ,IAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIG,KAAK,CAACa,SAAV,CAH5B,CADA;AAOP,CA3CD;;AA6CA,eAAed,KAAf","sourcesContent":["import React,{useReducer} from 'react';\n\nimport {validate} from '../util/Validators';\nimport './Input.css';\n\nconst inputReducer=(state,action)=>{\n    switch(action.type){\n        case 'CHANGE':\n            return {\n                ...state,\n                value:action.val,\n                isValid:validate(action.val,action.validators),\n            };\n        default:\n            return state;\n    }\n}\n\nconst Input=props=>{\n\n    const [inputState,dispatch]=useReducer(inputReducer,{value:'',isValid:false});\n\n    const changeHandler=event=>{\n        dispatch({\n            type:'CHANGE',\n            val:event.target.value,\n            validators:props.validators,\n        });\n    }\n\n    const touchHandler=()=>{\n        dispatch({\n            type:'TOUCH',\n        });\n    };\n\n    const element=props.element==='input'?\n        <input \n            id={props.id} \n            type={props.type} \n            placeholder={props.placeholder} \n            onChange={changeHandler}\n            onBlur={touchHandler}\n            value={inputState.value}\n        />\n        :\n        <textarea \n            id={props.id} \n            rows={props.rows||3} \n            onChange={changeHandler}\n            onBlur={touchHandler}\n            value={inputState.value}    \n        />;\n    \n        return (\n        <div class={`form-control ${!inputState.isValud  && 'form-control--invalid'}`}>\n            <label htmlFor={props.id}>{props.label}</label>\n            {element}\n            {!inputState.isValid && <p>{props.errorText}</p>}\n        </div>\n    )\n}\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}
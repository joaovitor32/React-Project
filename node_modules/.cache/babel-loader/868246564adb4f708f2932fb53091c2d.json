{"ast":null,"code":"import _slicedToArray from \"/home/buzina/\\xC1rea de Trabalho/reactproject/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/buzina/\\xC1rea de Trabalho/reactproject/src/shared/components/FormElements/ImageUpload.js\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport Button from './Button';\nimport './ImageUpload.css';\n\nconst ImageUpload = props => {\n  const filePickerRef = useRef();\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        file = _useState2[0],\n        setFile = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        previewUrl = _useState4[0],\n        setPreviewUrl = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isValid = _useState6[0],\n        setIsValid = _useState6[1];\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    } else {\n      const fileReader = new FileReader();\n\n      fileReader.onload = () => {\n        setPreviewUrl(fileReader.result);\n      };\n\n      fileReader.readAsDataURL(file);\n    }\n  }, [file]);\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n\n  const pickedHandler = event => {\n    let pickedFile;\n    let fileIsValid = isValid;\n\n    if (event.target.files && event.target.files === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n      return;\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: props.id,\n    ref: filePickerRef,\n    style: {\n      display: 'none'\n    },\n    type: \"file\",\n    accept: \".jpg,.png,.jpeg\",\n    onChange: pickedHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: `image-upload ${props.center && 'center'}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"image-upload__preview\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, previewUrl && React.createElement(\"img\", {\n    src: previewUrl,\n    alt: \"Preview\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), !previewUrl && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Please pick an image.\")), React.createElement(Button, {\n    type: \"button\",\n    onClick: pickImageHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"PICK IMAGE\")), !isValid && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, props.errorText));\n};\n\nexport default ImageUpload;","map":{"version":3,"sources":["/home/buzina/Área de Trabalho/reactproject/src/shared/components/FormElements/ImageUpload.js"],"names":["React","useRef","useState","useEffect","Button","ImageUpload","props","filePickerRef","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","fileReader","FileReader","onload","result","readAsDataURL","pickImageHandler","current","click","pickedHandler","event","pickedFile","fileIsValid","target","files","onInput","id","display","center","errorText"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport Button from './Button'\nimport './ImageUpload.css'\n\nconst ImageUpload = props => {\n    const filePickerRef = useRef();\n    const [file, setFile] = useState();\n    const [previewUrl, setPreviewUrl] = useState();\n    const [isValid, setIsValid] = useState(false);\n\n    useEffect(() => {\n        if (!file) {\n            return;\n        } else {\n            const fileReader = new FileReader();\n            fileReader.onload = () => {\n                setPreviewUrl(fileReader.result);\n            }\n            fileReader.readAsDataURL(file);\n        }\n    }, [file])\n\n    const pickImageHandler = () => {\n        filePickerRef.current.click();\n    }\n    const pickedHandler = event => {\n        let pickedFile;\n        let fileIsValid = isValid;\n        if (event.target.files && event.target.files === 1) {\n            pickedFile = event.target.files[0];\n            setFile(pickedFile);\n            setIsValid(true);\n            fileIsValid = true;\n            return;\n        } else {\n            setIsValid(false);\n            fileIsValid = false;\n        }\n        props.onInput(props.id, pickedFile, fileIsValid);\n    }\n\n    return (\n        <div className=\"form-control\">\n            <input\n                id={props.id}\n                ref={filePickerRef}\n                style={{ display: 'none' }}\n                type=\"file\"\n                accept=\".jpg,.png,.jpeg\"\n                onChange={pickedHandler}\n            />\n            <div className={`image-upload ${props.center && 'center'}`}>\n                <div className=\"image-upload__preview\">\n                    {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n                    {!previewUrl && <p>Please pick an image.</p>}\n                </div>\n                <Button type=\"button\" onClick={pickImageHandler}>\n                    PICK IMAGE\n        </Button>\n            </div>\n            {!isValid && <p>{props.errorText}</p>}\n        </div>\n    )\n}\n\nexport default ImageUpload;"]},"metadata":{},"sourceType":"module"}
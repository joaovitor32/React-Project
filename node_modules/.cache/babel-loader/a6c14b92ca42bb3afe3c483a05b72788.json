{"ast":null,"code":"import _slicedToArray from \"/home/buzina/\\xC1rea de Trabalho/reactproject/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/buzina/\\xC1rea de Trabalho/reactproject/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return _objectSpread({}, state, {\n        inputs: _objectSpread({}, state.inputs, {\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        }),\n        isValid: formIsValid\n      });\n\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const _useReducer = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        formState = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: \"SET_DATA\",\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  });\n  return [formState, inputHandler, setFormData];\n};","map":{"version":3,"sources":["/home/buzina/Área de Trabalho/reactproject/src/shared/hooks/form-hook.js"],"names":["useCallback","useReducer","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","useForm","initialInputs","initialFormValidity","formState","dispatch","inputHandler","id","setFormData","inputData","formValidity"],"mappings":";;AAAA,SAAQA,WAAR,EAAoBC,UAApB,QAAqC,OAArC;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AACE,UAAIC,WAAW,GAAG,IAAlB;;AACA,WAAK,MAAMC,OAAX,IAAsBJ,KAAK,CAACK,MAA5B,EAAoC;AAClC,YAAID,OAAO,KAAKH,MAAM,CAACG,OAAvB,EAAgC;AAC9BD,UAAAA,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAApC;AACD,SAFD,MAEO;AACLH,UAAAA,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;AACD;AACF;;AACD,+BACKN,KADL;AAEEK,QAAAA,MAAM,oBACDL,KAAK,CAACK,MADL;AAEJ,WAACJ,MAAM,CAACG,OAAR,GAAkB;AAAEG,YAAAA,KAAK,EAAEN,MAAM,CAACM,KAAhB;AAAuBD,YAAAA,OAAO,EAAEL,MAAM,CAACK;AAAvC;AAFd,UAFR;AAMEA,QAAAA,OAAO,EAAEH;AANX;;AAQF,SAAK,UAAL;AACE,aAAO;AACLE,QAAAA,MAAM,EAACJ,MAAM,CAACI,MADT;AAELC,QAAAA,OAAO,EAACL,MAAM,CAACE;AAFV,OAAP;;AAIF;AACE,aAAOH,KAAP;AAxBJ;AA0BD,CA3BH;;AA6BA,OAAO,MAAMQ,OAAO,GAAG,CAACC,aAAD,EAAeC,mBAAf,KAAqC;AAAA,sBAC1BZ,UAAU,CAACC,WAAD,EAAc;AAClDM,IAAAA,MAAM,EAAEI,aAD0C;AAElDH,IAAAA,OAAO,EAAEI;AAFyC,GAAd,CADgB;AAAA;AAAA,QACjDC,SADiD;AAAA,QACtCC,QADsC;;AAKtD,QAAMC,YAAY,GAAGhB,WAAW,CAAC,CAACiB,EAAD,EAAKP,KAAL,EAAYD,OAAZ,KAAwB;AACvDM,IAAAA,QAAQ,CAAC;AACPV,MAAAA,IAAI,EAAE,cADC;AAEPK,MAAAA,KAAK,EAAEA,KAFA;AAGPD,MAAAA,OAAO,EAAEA,OAHF;AAIPF,MAAAA,OAAO,EAAEU;AAJF,KAAD,CAAR;AAMD,GAP+B,EAO7B,EAP6B,CAAhC;AASA,QAAMC,WAAW,GAAClB,WAAW,CAAC,CAACmB,SAAD,EAAWC,YAAX,KAA0B;AACtDL,IAAAA,QAAQ,CAAC;AACPV,MAAAA,IAAI,EAAC,UADE;AAEPG,MAAAA,MAAM,EAACW,SAFA;AAGPb,MAAAA,WAAW,EAACc;AAHL,KAAD,CAAR;AAKD,GAN4B,CAA7B;AAQA,SAAO,CAACN,SAAD,EAAWE,YAAX,EAAwBE,WAAxB,CAAP;AACL,CAvBM","sourcesContent":["import {useCallback,useReducer} from 'react';\n\nconst formReducer = (state, action) => {\n    switch (action.type) {\n      case 'INPUT_CHANGE':\n        let formIsValid = true;\n        for (const inputId in state.inputs) {\n          if (inputId === action.inputId) {\n            formIsValid = formIsValid && action.isValid;\n          } else {\n            formIsValid = formIsValid && state.inputs[inputId].isValid;\n          }\n        }\n        return {\n          ...state,\n          inputs: {\n            ...state.inputs,\n            [action.inputId]: { value: action.value, isValid: action.isValid }\n          },\n          isValid: formIsValid\n        };\n      case 'SET_DATA':\n        return {\n          inputs:action.inputs,\n          isValid:action.formIsValid\n        }\n      default:\n        return state;\n    }\n  };\n\nexport const useForm = (initialInputs,initialFormValidity)=>{\n    const [formState, dispatch] = useReducer(formReducer, {\n        inputs: initialInputs,\n        isValid: initialFormValidity\n      });\n      const inputHandler = useCallback((id, value, isValid) => {\n        dispatch({\n          type: 'INPUT_CHANGE',\n          value: value,\n          isValid: isValid,\n          inputId: id\n        });\n      }, []);\n\n      const setFormData=useCallback((inputData,formValidity)=>{\n        dispatch({\n          type:\"SET_DATA\",\n          inputs:inputData,\n          formIsValid:formValidity,\n        })\n      });\n\n      return [formState,inputHandler,setFormData]\n};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/home/buzina/\\xC1rea de Trabalho/reactproject/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/buzina/\\xC1rea de Trabalho/reactproject/src/places/pages/UpdatePlace.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './PlaceForm.css';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/components/util/Validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport Card from '../../shared/components/UIEelements/Card';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIEelements/LoadingSpinner';\nimport ErrorModal from '../../shared/components/UIEelements/ErrorModal';\n\nconst UpdatePlace = () => {\n  const _useHttpClient = useHttpClient(),\n        isLoading = _useHttpClient.isLoading,\n        error = _useHttpClient.error,\n        sendRequest = _useHttpClient.sendRequest,\n        clearError = _useHttpClient.clearError;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        loadedPlace = _useState2[0],\n        setLoadedPlace = _useState2[1];\n\n  const placeId = useParams().placeId;\n\n  const _useForm = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    }\n  }, false),\n        _useForm2 = _slicedToArray(_useForm, 3),\n        formState = _useForm2[0],\n        inputHandler = _useForm2[1],\n        setFormData = _useForm2[2];\n\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(`http://localhost:5000/api/places/${placeId}`);\n        setLoadedPlace(responseData.place);\n        setFormData({\n          title: {\n            value: responseData.place.title,\n            isValid: true\n          },\n          description: {\n            value: responseData.place.description,\n            isValid: true\n          }\n        }, true);\n      } catch (err) {}\n    };\n\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n\n  const placeUpdateSubmitHandler = event => {\n    event.preventDefault();\n    console.log(formState.inputs);\n  };\n\n  if (!loadedPlace && !error) {\n    return React.createElement(\"div\", {\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Could not find place!\"));\n  }\n\n  if (isLoading) {\n    return React.createElement(\"div\", {\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(LoadingSpinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), !isLoading && loadedPlace && React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: placeUpdateSubmitHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid title.\",\n    onInput: inputHandler,\n    initialValue: formState.inputs.title.value,\n    initialValid: formState.inputs.title.isValid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid description (min. 5 characters).\",\n    onInput: inputHandler,\n    initialValue: formState.inputs.description.value,\n    initialValid: formState.inputs.description.isValid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"UPDATE PLACE\")));\n};\n\nexport default UpdatePlace;","map":{"version":3,"sources":["/home/buzina/Área de Trabalho/reactproject/src/places/pages/UpdatePlace.js"],"names":["React","useEffect","useState","useParams","Input","Button","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","Card","useHttpClient","LoadingSpinner","ErrorModal","UpdatePlace","isLoading","error","sendRequest","clearError","loadedPlace","setLoadedPlace","placeId","title","value","isValid","description","formState","inputHandler","setFormData","fetchPlace","responseData","place","err","placeUpdateSubmitHandler","event","preventDefault","console","log","inputs"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport './PlaceForm.css';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport {VALIDATOR_REQUIRE,VALIDATOR_MINLENGTH} from '../../shared/components/util/Validators'\nimport {useForm} from '../../shared/hooks/form-hook';\nimport Card from '../../shared/components/UIEelements/Card'\nimport {useHttpClient} from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIEelements/LoadingSpinner'\nimport ErrorModal from '../../shared/components/UIEelements/ErrorModal'\n\n  const UpdatePlace = () => {\n  \n    const {isLoading,error,sendRequest,clearError}=useHttpClient();\n\n    const [loadedPlace,setLoadedPlace]=useState();\n\n    const placeId = useParams().placeId;\n  \n    const [formState, inputHandler,setFormData] = useForm(\n      {\n        title: {\n          value: '',\n          isValid: false\n        },\n        description: {\n          value: '',\n          isValid: false\n        }\n      },\n      false\n    );\n      \n      useEffect( \n          ()=>{\n            const fetchPlace = async ()=>{\n              try{\n                const responseData = await sendRequest(`http://localhost:5000/api/places/${placeId}`);\n                setLoadedPlace(responseData.place);\n                setFormData({\n                  title: {\n                    value: responseData.place.title,\n                    isValid: true\n                  },\n                  description: {\n                    value: responseData.place.description,\n                    isValid: true\n                  }\n                },true)\n              }catch(err){\n\n              }\n          }\n          fetchPlace();\n        }\n      ,[sendRequest,placeId,setFormData])\n  \n    const placeUpdateSubmitHandler = event => {\n      event.preventDefault();\n      console.log(formState.inputs);\n    };\n  \n    if (!loadedPlace && !error) {\n      return (\n        <div className=\"center\">\n          <Card>Could not find place!</Card>\n        </div>\n      );\n    }\n  \n    if(isLoading){\n      return (\n        <div className=\"center\">\n            <LoadingSpinner/>\n        </div>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <ErrorModal error={error} onClear={clearError}/>\n        {!isLoading && loadedPlace && <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n          <Input\n            id=\"title\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter a valid title.\"\n            onInput={inputHandler}\n            initialValue={formState.inputs.title.value}\n            initialValid={formState.inputs.title.isValid}\n          />\n          <Input\n            id=\"description\"\n            element=\"textarea\"\n            label=\"Description\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid description (min. 5 characters).\"\n            onInput={inputHandler}\n            initialValue={formState.inputs.description.value}\n            initialValid={formState.inputs.description.isValid}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            UPDATE PLACE\n          </Button>\n        </form>}\n      </React.Fragment>\n    );\n  };\n  \n  export default UpdatePlace;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/home/buzina/\\xC1rea de Trabalho/reactproject/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/buzina/\\xC1rea de Trabalho/reactproject/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/buzina/\\xC1rea de Trabalho/reactproject/src/user/pages/Auth.js\";\nimport React, { useState, useContext } from 'react';\nimport './Auth.css';\nimport Card from '../../shared/components/UIEelements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/components/util/Validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport AuthContext from '../../shared/context/auth-context';\nimport ErrorModal from '../../shared/components/UIEelements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIEelements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoginMode = _useState2[0],\n        setIsLoginMode = _useState2[1];\n\n  const _useHttpClient = useHttpClient(),\n        isLoading = _useHttpClient.isLoading,\n        error = _useHttpClient.error,\n        sendRequest = _useHttpClient.sendRequest,\n        clearError = _useHttpClient.clearError;\n\n  const _useForm = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    }\n  }, false),\n        _useForm2 = _slicedToArray(_useForm, 3),\n        formState = _useForm2[0],\n        inputHandler = _useForm2[1],\n        setFormData = _useForm2[2];\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(_objectSpread({}, formState.inputs, {\n        name: undefined\n      }), formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFormData(_objectSpread({}, formState.inputs, {\n        name: {\n          value: '',\n          isValid: false\n        }\n      }), false);\n    }\n\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const authSubmitHandler = async event => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        const responseData = await sendRequest('http://localhost:5000/api/users/login', 'POST', JSON.stringify({\n          email: formState.inputs.email.value,\n          password: formState.inputs.password.value\n        }), {\n          'Content-Type': 'application/json'\n        });\n        auth.login(responseData.user.id);\n      } catch (err) {}\n    } else {\n      try {\n        const responseData = await sendRequest('http://localhost:5000/api/users/signup', 'POST', JSON.stringify({\n          name: formState.inputs.name.value,\n          email: formState.inputs.email.value,\n          password: formState.inputs.password.value\n        }), {\n          'Content-Type': 'application/json'\n        });\n        auth.login(responseData.user.id);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Card, {\n    className: \"authentication\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), isLoading && React.createElement(LoadingSpinner, {\n    asOverlay: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Login Required\"), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    onSubmit: authSubmitHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, !isLoginMode && React.createElement(Input, {\n    element: \"input\",\n    id: \"name\",\n    type: \"text\",\n    label: \"Your Name\",\n    validators: [VALIDATOR_REQUIRE],\n    errorText: \"Enter a name...\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(Input, {\n    element: \"input\",\n    id: \"email\",\n    type: \"email\",\n    label: \"E-Mail\",\n    validators: [VALIDATOR_EMAIL()],\n    errorText: \"Please enter a valid email address.\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), React.createElement(Input, {\n    element: \"input\",\n    id: \"password\",\n    type: \"password\",\n    label: \"Password\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid password, at least 5 characters.\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, isLoginMode ? 'LOGIN' : 'SIGNUP')), React.createElement(Button, {\n    inverse: true,\n    onClick: switchModeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"SWITCH TO \", isLoginMode ? 'SIGNUP' : 'LOGIN')));\n};\n\nexport default Auth;","map":{"version":3,"sources":["/home/buzina/√Årea de Trabalho/reactproject/src/user/pages/Auth.js"],"names":["React","useState","useContext","Card","Input","Button","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","useForm","AuthContext","ErrorModal","LoadingSpinner","useHttpClient","Auth","auth","isLoginMode","setIsLoginMode","isLoading","error","sendRequest","clearError","email","value","isValid","password","formState","inputHandler","setFormData","switchModeHandler","inputs","name","undefined","prevMode","authSubmitHandler","event","preventDefault","responseData","JSON","stringify","login","user","id","err","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\n\nimport './Auth.css';\n\nimport Card from '../../shared/components/UIEelements/Card'\nimport Input from '../../shared/components/FormElements/Input'\nimport Button from '../../shared/components/FormElements/Button'\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/components/util/Validators'\nimport { useForm } from '../../shared/hooks/form-hook'\nimport AuthContext from '../../shared/context/auth-context'\nimport ErrorModal from '../../shared/components/UIEelements/ErrorModal'\nimport LoadingSpinner from '../../shared/components/UIEelements/LoadingSpinner'\nimport {useHttpClient} from '../../shared/hooks/http-hook';\n\n\nconst Auth = () => {\n\n  const auth = useContext(AuthContext);\n\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const {isLoading,error,sendRequest,clearError} = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false\n      },\n      password: {\n        value: '',\n        isValid: false\n      }\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData({\n        ...formState.inputs,\n        name: undefined,\n\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFormData({\n        ...formState.inputs,\n        name: {\n          value: '',\n          isValid: false\n        }\n      }, false)\n    }\n    setIsLoginMode(prevMode => !prevMode);\n  }\n\n  const authSubmitHandler = async event => {\n    event.preventDefault();\n    if (isLoginMode) {\n      try {\n        const responseData=await sendRequest('http://localhost:5000/api/users/login','POST',JSON.stringify({\n              email: formState.inputs.email.value,\n              password: formState.inputs.password.value\n            }),   \n              {'Content-Type': 'application/json'}\n          )\n    \n        auth.login(responseData.user.id);\n      }catch(err){\n\n      }\n    } else {\n      try {\n        const responseData=await sendRequest('http://localhost:5000/api/users/signup','POST',\n          JSON.stringify({\n          name: formState.inputs.name.value,\n          email: formState.inputs.email.value,\n          password: formState.inputs.password.value,\n          }),{\n            'Content-Type': 'application/json',\n            }\n        );\n      \n        auth.login(responseData.user.id);\n      } catch (err) {\n        console.log(err);\n\n      }\n    }\n  }\n  return (\n    <React.Fragment>\n      <Card className=\"authentication\">\n        <ErrorModal error={error} onClear={clearError}/>\n        {isLoading && <LoadingSpinner asOverlay/>}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode &&\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE]}\n              errorText=\"Enter a name...\"\n              onInput={inputHandler}\n            />\n          }\n          <Input\n            element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"E-Mail\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address.\"\n            onInput={inputHandler}\n          />\n          <Input\n            element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid password, at least 5 characters.\"\n            onInput={inputHandler}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n        </Button>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Auth;"]},"metadata":{},"sourceType":"module"}
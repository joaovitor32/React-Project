{"ast":null,"code":"import _slicedToArray from \"/home/buzina/\\xC1rea de Trabalho/reactproject/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/buzina/\\xC1rea de Trabalho/reactproject/src/user/pages/Users.js\";\nimport React, { useEffect, useState } from 'react';\nimport UsersList from '../components/UsersList';\nimport ErrorModal from '../../shared/components/UIEelements/ErrorModal';\n\nconst Users = () => {\n  useEffect(() => {\n    const _useState = useState(false),\n          _useState2 = _slicedToArray(_useState, 2),\n          isLoading = _useState2[0],\n          setIsLoading = _useState2[1];\n\n    const _useState3 = useState(),\n          _useState4 = _slicedToArray(_useState3, 2),\n          error = _useState4[0],\n          setError = _useState4[1];\n\n    const _useState5 = useState(),\n          _useState6 = _slicedToArray(_useState5, 2),\n          loadedUsers = _useState6[0],\n          setLoadedUsers = _useState6[1];\n\n    const sendRequest = async () => {\n      setIsLoading(true);\n\n      try {\n        const response = await fetch('http://localhost:5000/api/users');\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(respnseData.message);\n        }\n\n        setLoadedUsers(responseData.users);\n        setIsLoading(false);\n      } catch (err) {\n        setIsLoading(false);\n        setError(error.message);\n      }\n    };\n\n    sendRequest();\n  }, []);\n\n  const erroHandler = () => {\n    setError(null);\n  };\n\n  return;\n  React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(UsersList, {\n    items: loadedUsers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }));\n};\n\nexport default Users;","map":{"version":3,"sources":["/home/buzina/Área de Trabalho/reactproject/src/user/pages/Users.js"],"names":["React","useEffect","useState","UsersList","ErrorModal","Users","isLoading","setIsLoading","error","setError","loadedUsers","setLoadedUsers","sendRequest","response","fetch","responseData","json","ok","Error","respnseData","message","users","err","erroHandler"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,QAAuC,OAAvC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,UAAP,MAAuB,gDAAvB;;AAEA,MAAMC,KAAK,GAAC,MAAI;AACZJ,EAAAA,SAAS,CAAC,MAAI;AAAA,sBAEqBC,QAAQ,CAAC,KAAD,CAF7B;AAAA;AAAA,UAEHI,SAFG;AAAA,UAEOC,YAFP;;AAAA,uBAGaL,QAAQ,EAHrB;AAAA;AAAA,UAGHM,KAHG;AAAA,UAGGC,QAHH;;AAAA,uBAIyBP,QAAQ,EAJjC;AAAA;AAAA,UAIHQ,WAJG;AAAA,UAISC,cAJT;;AAMV,UAAMC,WAAW,GAAC,YAAU;AACxBL,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACC,cAAMM,QAAQ,GAAE,MAAMC,KAAK,CAAC,iCAAD,CAA3B;AACA,cAAMC,YAAY,GAAE,MAAMF,QAAQ,CAACG,IAAT,EAA1B;;AAEA,YAAG,CAACH,QAAQ,CAACI,EAAb,EAAgB;AACZ,gBAAM,IAAIC,KAAJ,CAAUC,WAAW,CAACC,OAAtB,CAAN;AACH;;AAEDT,QAAAA,cAAc,CAACI,YAAY,CAACM,KAAd,CAAd;AACAd,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,OAVD,CAUC,OAAMe,GAAN,EAAU;AACPf,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAACD,KAAK,CAACY,OAAP,CAAR;AACH;AACJ,KAhBD;;AAiBAR,IAAAA,WAAW;AACd,GAxBQ,EAwBP,EAxBO,CAAT;;AAyBA,QAAMW,WAAW,GAAC,MAAI;AAClBd,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GAFD;;AAGA;AACI,sBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEC,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGP,CAjCD;;AAmCA,eAAeL,KAAf","sourcesContent":["import React,{useEffect,useState} from 'react';\nimport UsersList from '../components/UsersList';\nimport ErrorModal from '../../shared/components/UIEelements/ErrorModal';\n\nconst Users=()=>{\n    useEffect(()=>{\n\n        const [isLoading,setIsLoading]=useState(false);\n        const [error,setError]=useState();\n        const [loadedUsers,setLoadedUsers]=useState();\n\n        const sendRequest=async ()=>{\n            setIsLoading(true);\n            try{\n                const response= await fetch('http://localhost:5000/api/users');\n                const responseData= await response.json(); \n            \n                if(!response.ok){\n                    throw new Error(respnseData.message);\n                }\n\n                setLoadedUsers(responseData.users);\n                setIsLoading(false);\n            }catch(err){\n                setIsLoading(false);\n                setError(error.message);\n            }\n        }\n        sendRequest();\n    },[]);\n    const erroHandler=()=>{\n        setError(null);\n    }\n    return\n        <React.Fragment> \n            <UsersList items={loadedUsers}/>\n        </React.Fragment>\n};  \n\nexport default Users;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/home/buzina/\\xC1rea de Trabalho/reactproject/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback, useRef, useEffect } from 'react';\nexport const useHttpClient = () => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoading = _useState2[0],\n        setIsLoading = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        error = _useState4[0],\n        setError = _useState4[1];\n\n  const activeHttpRequests = useRef([]);\n  const sendRequest = useCallback(async (url, method = \"GET\", body = null, headers = {}) => {\n    setIsLoading(true);\n    const httpAbortCtrl = new AbortController();\n    activeHttpRequests.current.push(httpAbortCtrl);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n        signal: httpAbortCrll.signal\n      });\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(responseData.message);\n      }\n\n      return responseData;\n    } catch (err) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abortCtrl());\n    };\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  };\n};","map":{"version":3,"sources":["/home/buzina/Área de Trabalho/reactproject/src/shared/hooks/http-hook.js"],"names":["useState","useCallback","useRef","useEffect","useHttpClient","isLoading","setIsLoading","error","setError","activeHttpRequests","sendRequest","url","method","body","headers","httpAbortCtrl","AbortController","current","push","response","fetch","signal","httpAbortCrll","responseData","json","ok","Error","message","err","clearError","forEach","abortCtrl"],"mappings":";AAAA,SAAQA,QAAR,EAAiBC,WAAjB,EAA6BC,MAA7B,EAAoCC,SAApC,QAAoD,OAApD;AAEA,OAAO,MAAMC,aAAa,GAAC,MAAI;AAAA,oBAEIJ,QAAQ,CAAC,KAAD,CAFZ;AAAA;AAAA,QAEpBK,SAFoB;AAAA,QAEVC,YAFU;;AAAA,qBAGJN,QAAQ,EAHJ;AAAA;AAAA,QAGpBO,KAHoB;AAAA,QAGdC,QAHc;;AAK3B,QAAMC,kBAAkB,GAACP,MAAM,CAAC,EAAD,CAA/B;AAEA,QAAMQ,WAAW,GAACT,WAAW,CAAC,OAAMU,GAAN,EAAUC,MAAM,GAAC,KAAjB,EAAuBC,IAAI,GAAC,IAA5B,EAAiCC,OAAO,GAAC,EAAzC,KAA8C;AAExER,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMS,aAAa,GAAC,IAAIC,eAAJ,EAApB;AAEAP,IAAAA,kBAAkB,CAACQ,OAAnB,CAA2BC,IAA3B,CAAgCH,aAAhC;;AAEA,QAAG;AAEC,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,EAAK;AAC7BC,QAAAA,MAD6B;AAE7BC,QAAAA,IAF6B;AAG7BC,QAAAA,OAH6B;AAI7BO,QAAAA,MAAM,EAACC,aAAa,CAACD;AAJQ,OAAL,CAA5B;AAOA,YAAME,YAAY,GAAE,MAAMJ,QAAQ,CAACK,IAAT,EAA1B;;AAEA,UAAG,CAACL,QAAQ,CAACM,EAAb,EAAgB;AACZ,cAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACH;;AACD,aAAOJ,YAAP;AACH,KAfD,CAeC,OAAMK,GAAN,EAAU;AAEPpB,MAAAA,QAAQ,CAACD,KAAK,CAACoB,OAAP,CAAR;AAEH;;AACDrB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GA5B4B,EA4B3B,EA5B2B,CAA7B;;AA8BA,QAAMuB,UAAU,GAAC,MAAI;AACjBrB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GAFD;;AAIAL,EAAAA,SAAS,CAAC,MAAI;AACV,WAAO,MAAI;AACPM,MAAAA,kBAAkB,CAACQ,OAAnB,CAA2Ba,OAA3B,CAAmCC,SAAS,IAAEA,SAAS,CAACA,SAAV,EAA9C;AACH,KAFD;AAGH,GAJQ,EAIP,EAJO,CAAT;AAMA,SAAO;AAAC1B,IAAAA,SAAD;AAAWE,IAAAA,KAAX;AAAiBG,IAAAA,WAAjB;AAA6BmB,IAAAA;AAA7B,GAAP;AACH,CAhDM","sourcesContent":["import {useState,useCallback,useRef,useEffect} from 'react'; \n\nexport const useHttpClient=()=>{\n    \n    const [isLoading,setIsLoading]=useState(false);\n    const [error,setError]=useState();\n\n    const activeHttpRequests=useRef([]);\n\n    const sendRequest=useCallback(async(url,method=\"GET\",body=null,headers={})=>{\n        \n        setIsLoading(true);\n        const httpAbortCtrl=new AbortController();\n        \n        activeHttpRequests.current.push(httpAbortCtrl)\n\n        try{\n\n            const response = await fetch(url,{\n                method,\n                body,\n                headers,\n                signal:httpAbortCrll.signal\n            });\n\n            const responseData= await response.json();\n\n            if(!response.ok){\n                throw new Error(responseData.message);\n            }\n            return responseData;\n        }catch(err){\n\n            setError(error.message);\n\n        }\n        setIsLoading(false);\n    },[]);\n\n    const clearError=()=>{\n        setError(null);\n    }\n\n    useEffect(()=>{\n        return ()=>{\n            activeHttpRequests.current.forEach(abortCtrl=>abortCtrl.abortCtrl());\n        }\n    },[])\n\n    return {isLoading,error,sendRequest,clearError};\n};"]},"metadata":{},"sourceType":"module"}
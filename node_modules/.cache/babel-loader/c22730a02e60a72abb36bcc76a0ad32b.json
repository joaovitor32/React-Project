{"ast":null,"code":"import _slicedToArray from \"/home/buzina/\\xC1rea de Trabalho/reactproject/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/buzina/\\xC1rea de Trabalho/reactproject/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return _objectSpread({}, state, {\n        inputs: _objectSpread({}, state.inputs, {\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        }),\n        isValid: formIsValid\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst inputHandler = useCallback((id, value, isValid) => {\n  dispatch({\n    type: 'INPUT_CHANGE',\n    value: value,\n    isValid: isValid,\n    inputId: id\n  });\n}, []);\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const _useReducer = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        formState = _useReducer2[0],\n        dispatch = _useReducer2[1];\n};","map":{"version":3,"sources":["/home/buzina/Área de Trabalho/reactproject/src/shared/hooks/form-hook.js"],"names":["useCallback","useReducer","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","inputHandler","id","dispatch","useForm","initialInputs","initialFormValidity","formState"],"mappings":";;AAAA,SAAQA,WAAR,EAAoBC,UAApB,QAAqC,OAArC;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AACE,UAAIC,WAAW,GAAG,IAAlB;;AACA,WAAK,MAAMC,OAAX,IAAsBJ,KAAK,CAACK,MAA5B,EAAoC;AAClC,YAAID,OAAO,KAAKH,MAAM,CAACG,OAAvB,EAAgC;AAC9BD,UAAAA,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAApC;AACD,SAFD,MAEO;AACLH,UAAAA,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;AACD;AACF;;AACD,+BACKN,KADL;AAEEK,QAAAA,MAAM,oBACDL,KAAK,CAACK,MADL;AAEJ,WAACJ,MAAM,CAACG,OAAR,GAAkB;AAAEG,YAAAA,KAAK,EAAEN,MAAM,CAACM,KAAhB;AAAuBD,YAAAA,OAAO,EAAEL,MAAM,CAACK;AAAvC;AAFd,UAFR;AAMEA,QAAAA,OAAO,EAAEH;AANX;;AAQF;AACE,aAAOH,KAAP;AAnBJ;AAqBD,CAtBH;;AAuBE,MAAMQ,YAAY,GAAGX,WAAW,CAAC,CAACY,EAAD,EAAKF,KAAL,EAAYD,OAAZ,KAAwB;AACvDI,EAAAA,QAAQ,CAAC;AACPR,IAAAA,IAAI,EAAE,cADC;AAEPK,IAAAA,KAAK,EAAEA,KAFA;AAGPD,IAAAA,OAAO,EAAEA,OAHF;AAIPF,IAAAA,OAAO,EAAEK;AAJF,GAAD,CAAR;AAMD,CAP+B,EAO7B,EAP6B,CAAhC;AAQF,OAAO,MAAME,OAAO,GAAG,CAACC,aAAD,EAAeC,mBAAf,KAAqC;AAAA,sBAC1Bf,UAAU,CAACC,WAAD,EAAc;AAClDM,IAAAA,MAAM,EAAEO,aAD0C;AAElDN,IAAAA,OAAO,EAAEO;AAFyC,GAAd,CADgB;AAAA;AAAA,QACjDC,SADiD;AAAA,QACtCJ,QADsC;AAK3D,CALM","sourcesContent":["import {useCallback,useReducer} from 'react';\n\nconst formReducer = (state, action) => {\n    switch (action.type) {\n      case 'INPUT_CHANGE':\n        let formIsValid = true;\n        for (const inputId in state.inputs) {\n          if (inputId === action.inputId) {\n            formIsValid = formIsValid && action.isValid;\n          } else {\n            formIsValid = formIsValid && state.inputs[inputId].isValid;\n          }\n        }\n        return {\n          ...state,\n          inputs: {\n            ...state.inputs,\n            [action.inputId]: { value: action.value, isValid: action.isValid }\n          },\n          isValid: formIsValid\n        };\n      default:\n        return state;\n    }\n  };\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\nexport const useForm = (initialInputs,initialFormValidity)=>{\n    const [formState, dispatch] = useReducer(formReducer, {\n        inputs: initialInputs,\n        isValid: initialFormValidity\n      });\n};"]},"metadata":{},"sourceType":"module"}
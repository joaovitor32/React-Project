{"ast":null,"code":"import _slicedToArray from \"/home/buzina/\\xC1rea de Trabalho/reactproject/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/buzina/\\xC1rea de Trabalho/reactproject/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/buzina/\\xC1rea de Trabalho/reactproject/src/shared/components/FormElements/Input.js\";\nimport React, { useReducer, useEffect } from 'react';\nimport { validate } from '../util/Validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return _objectSpread({}, state, {\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      });\n\n    case 'TOUCH':\n      {\n        return _objectSpread({}, state, {\n          isTouched: true\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const _useReducer = useReducer(inputReducer, {\n    value: props.value,\n    isTouched: false,\n    isValid: false\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        inputState = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const id = props.id,\n        onInput = props.onInput;\n  const value = inputState.value,\n        isValid = inputState.isValid;\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element = props.element === 'input' ? React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }) : React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  });\n  return React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: props.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, props.label), element, !inputState.isValid && inputState.isTouched && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, props.errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/buzina/Área de Trabalho/reactproject/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","useEffect","validate","inputReducer","state","action","type","value","val","isValid","validators","isTouched","Input","props","inputState","dispatch","id","onInput","changeHandler","event","target","touchHandler","element","placeholder","rows","label","errorText"],"mappings":"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","sourcesContent":["import React,{useReducer,useEffect} from 'react';\n\nimport {validate} from '../util/Validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n    case 'TOUCH': {\n      return {\n        ...state,\n        isTouched: true\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.value,\n    isTouched: false,\n    isValid: false\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid)\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${!inputState.isValid && inputState.isTouched &&\n        'form-control--invalid'}`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/home/buzina/\\xC1rea de Trabalho/reactproject/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/buzina/\\xC1rea de Trabalho/reactproject/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/buzina/\\xC1rea de Trabalho/reactproject/src/user/pages/Auth.js\";\nimport React, { useState, useContext } from 'react';\nimport './Auth.css';\nimport Card from '../../shared/components/UIEelements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/components/util/Validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport AuthContext from '../../shared/context/auth-context';\nimport ErroModal from '../../shared/components/UIEelements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIEelements/LoadingSpinner';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoginMode = _useState2[0],\n        setIsLoginMode = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setIsLoading = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        eror = _useState6[0],\n        setError = _useState6[1];\n\n  const _useForm = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    }\n  }, false),\n        _useForm2 = _slicedToArray(_useForm, 3),\n        formState = _useForm2[0],\n        inputHandler = _useForm2[1],\n        setFormData = _useForm2[2];\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(_objectSpread({}, formState.inputs, {\n        name: undefined\n      }), formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFormData(_objectSpread({}, formState.inputs, {\n        name: {\n          value: '',\n          isValid: false\n        }\n      }), false);\n    }\n\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const authSubmitHandler = async event => {\n    event.preventDefault();\n\n    if (isLoginMode) {} else {\n      try {\n        setIsLoading(true);\n        const response = await fetch('http://localhost:5000/api/users/signup', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: formState.inputs.name.value,\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          })\n        });\n        const responseData = await response.json();\n        console.log(responseData);\n        setIsLoading(false);\n        auth.login();\n      } catch (err) {\n        console.log(err);\n        setIsLoading(false);\n        setError(err.message || 'Something went wrong, please try again');\n      }\n    }\n  };\n\n  return React.createElement(Card, {\n    className: \"authentication\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, isLoading && React.createElement(LoadingSpinner, {\n    asOverlay: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Login Required\"), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    onSubmit: authSubmitHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, !isLoginMode && React.createElement(Input, {\n    element: \"input\",\n    id: \"name\",\n    type: \"text\",\n    label: \"Your Name\",\n    validators: [VALIDATOR_REQUIRE],\n    errorText: \"Enter a name...\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(Input, {\n    element: \"input\",\n    id: \"email\",\n    type: \"email\",\n    label: \"E-Mail\",\n    validators: [VALIDATOR_EMAIL()],\n    errorText: \"Please enter a valid email address.\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), React.createElement(Input, {\n    element: \"input\",\n    id: \"password\",\n    type: \"password\",\n    label: \"Password\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid password, at least 5 characters.\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, isLoginMode ? 'LOGIN' : 'SIGNUP')), React.createElement(Button, {\n    inverse: true,\n    onClick: switchModeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"SWITCH TO \", isLoginMode ? 'SIGNUP' : 'LOGIN'));\n};\n\nexport default Auth;","map":{"version":3,"sources":["/home/buzina/√Årea de Trabalho/reactproject/src/user/pages/Auth.js"],"names":["React","useState","useContext","Card","Input","Button","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","useForm","AuthContext","ErroModal","LoadingSpinner","Auth","auth","isLoginMode","setIsLoginMode","isLoading","setIsLoading","eror","setError","email","value","isValid","password","formState","inputHandler","setFormData","switchModeHandler","inputs","name","undefined","prevMode","authSubmitHandler","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","responseData","json","console","log","login","err","message"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AAEA,OAAO,YAAP;AAEA,OAAOC,IAAP,MAAiB,0CAAjB;AACA,OAAOC,KAAP,MAAkB,4CAAlB;AACA,OAAOC,MAAP,MAAmB,6CAAnB;AACA,SAASC,eAAT,EAA0BC,mBAA1B,EAA+CC,iBAA/C,QAAwE,yCAAxE;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,OAAOC,SAAP,MAAsB,gDAAtB;AACA,OAAOC,cAAP,MAA2B,oDAA3B;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAEjB,QAAMC,IAAI,GAAGZ,UAAU,CAACQ,WAAD,CAAvB;;AAFiB,oBAIqBT,QAAQ,CAAC,IAAD,CAJ7B;AAAA;AAAA,QAIVc,WAJU;AAAA,QAIGC,cAJH;;AAAA,qBAMcf,QAAQ,CAAC,KAAD,CANtB;AAAA;AAAA,QAMVgB,SANU;AAAA,QAMAC,YANA;;AAAA,qBAQKjB,QAAQ,CAAC,KAAD,CARb;AAAA;AAAA,QAQVkB,IARU;AAAA,QAQLC,QARK;;AAAA,mBAU8BX,OAAO,CACpD;AACEY,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,EADF;AAELC,MAAAA,OAAO,EAAE;AAFJ,KADT;AAKEC,IAAAA,QAAQ,EAAE;AACRF,MAAAA,KAAK,EAAE,EADC;AAERC,MAAAA,OAAO,EAAE;AAFD;AALZ,GADoD,EAWpD,KAXoD,CAVrC;AAAA;AAAA,QAUVE,SAVU;AAAA,QAUCC,YAVD;AAAA,QAUeC,WAVf;;AAwBjB,QAAMC,iBAAiB,GAAG,MAAM;AAC9B,QAAI,CAACb,WAAL,EAAkB;AAChBY,MAAAA,WAAW,mBACNF,SAAS,CAACI,MADJ;AAETC,QAAAA,IAAI,EAAEC;AAFG,UAIRN,SAAS,CAACI,MAAV,CAAiBR,KAAjB,CAAuBE,OAAvB,IAAkCE,SAAS,CAACI,MAAV,CAAiBL,QAAjB,CAA0BD,OAJpD,CAAX;AAKD,KAND,MAMO;AACLI,MAAAA,WAAW,mBACNF,SAAS,CAACI,MADJ;AAETC,QAAAA,IAAI,EAAE;AACJR,UAAAA,KAAK,EAAE,EADH;AAEJC,UAAAA,OAAO,EAAE;AAFL;AAFG,UAMR,KANQ,CAAX;AAOD;;AACDP,IAAAA,cAAc,CAACgB,QAAQ,IAAI,CAACA,QAAd,CAAd;AACD,GAjBD;;AAmBA,QAAMC,iBAAiB,GAAG,MAAMC,KAAN,IAAe;AACvCA,IAAAA,KAAK,CAACC,cAAN;;AACA,QAAIpB,WAAJ,EAAiB,CAEhB,CAFD,MAEO;AACL,UAAI;AACFG,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,cAAMkB,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAD,EAA2C;AACrEC,UAAAA,MAAM,EAAE,MAD6D;AAErEC,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT,WAF4D;AAKrEC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBZ,YAAAA,IAAI,EAAEL,SAAS,CAACI,MAAV,CAAiBC,IAAjB,CAAsBR,KADT;AAEnBD,YAAAA,KAAK,EAAEI,SAAS,CAACI,MAAV,CAAiBR,KAAjB,CAAuBC,KAFX;AAGnBE,YAAAA,QAAQ,EAAEC,SAAS,CAACI,MAAV,CAAiBL,QAAjB,CAA0BF;AAHjB,WAAf;AAL+D,SAA3C,CAA5B;AAWA,cAAMqB,YAAY,GAAC,MAAMP,QAAQ,CAACQ,IAAT,EAAzB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AACAzB,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAJ,QAAAA,IAAI,CAACiC,KAAL;AACD,OAjBD,CAiBE,OAAOC,GAAP,EAAY;AACZH,QAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACA9B,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAAC4B,GAAG,CAACC,OAAJ,IAAa,wCAAd,CAAR;AACD;AACF;AACF,GA5BD;;AA6BA,SACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGhC,SAAS,IAAI,oBAAC,cAAD;AAAgB,IAAA,SAAS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADhB,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE;AAAM,IAAA,QAAQ,EAAEgB,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAClB,WAAD,IACC,oBAAC,KAAD;AACE,IAAA,OAAO,EAAC,OADV;AAEE,IAAA,EAAE,EAAC,MAFL;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,KAAK,EAAC,WAJR;AAKE,IAAA,UAAU,EAAE,CAACP,iBAAD,CALd;AAME,IAAA,SAAS,EAAC,iBANZ;AAOE,IAAA,OAAO,EAAEkB,YAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAYE,oBAAC,KAAD;AACE,IAAA,OAAO,EAAC,OADV;AAEE,IAAA,EAAE,EAAC,OAFL;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,KAAK,EAAC,QAJR;AAKE,IAAA,UAAU,EAAE,CAACpB,eAAe,EAAhB,CALd;AAME,IAAA,SAAS,EAAC,qCANZ;AAOE,IAAA,OAAO,EAAEoB,YAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,EAqBE,oBAAC,KAAD;AACE,IAAA,OAAO,EAAC,OADV;AAEE,IAAA,EAAE,EAAC,UAFL;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,KAAK,EAAC,UAJR;AAKE,IAAA,UAAU,EAAE,CAACnB,mBAAmB,CAAC,CAAD,CAApB,CALd;AAME,IAAA,SAAS,EAAC,uDANZ;AAOE,IAAA,OAAO,EAAEmB,YAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,EA8BE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAE,CAACD,SAAS,CAACF,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,WAAW,GAAG,OAAH,GAAa,QAD3B,CA9BF,CAJF,EAsCE,oBAAC,MAAD;AAAQ,IAAA,OAAO,MAAf;AAAgB,IAAA,OAAO,EAAEa,iBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACab,WAAW,GAAG,QAAH,GAAc,OADtC,CAtCF,CADF;AA4CD,CApHD;;AAsHA,eAAeF,IAAf","sourcesContent":["import React, { useState, useContext } from 'react';\n\nimport './Auth.css';\n\nimport Card from '../../shared/components/UIEelements/Card'\nimport Input from '../../shared/components/FormElements/Input'\nimport Button from '../../shared/components/FormElements/Button'\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/components/util/Validators'\nimport { useForm } from '../../shared/hooks/form-hook'\nimport AuthContext from '../../shared/context/auth-context'\nimport ErroModal from '../../shared/components/UIEelements/ErrorModal'\nimport LoadingSpinner from '../../shared/components/UIEelements/LoadingSpinner'\n\nconst Auth = () => {\n\n  const auth = useContext(AuthContext);\n\n  const [isLoginMode, setIsLoginMode] = useState(true);\n\n  const [isLoading,setIsLoading]=useState(false);\n\n  const [eror,setError]=useState(false);\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false\n      },\n      password: {\n        value: '',\n        isValid: false\n      }\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData({\n        ...formState.inputs,\n        name: undefined,\n\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFormData({\n        ...formState.inputs,\n        name: {\n          value: '',\n          isValid: false\n        }\n      }, false)\n    }\n    setIsLoginMode(prevMode => !prevMode);\n  }\n\n  const authSubmitHandler = async event => {\n    event.preventDefault();\n    if (isLoginMode) {\n\n    } else {\n      try {\n        setIsLoading(true);\n        const response = await fetch('http://localhost:5000/api/users/signup', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            name: formState.inputs.name.value,\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          })\n        });\n        const responseData=await response.json();\n        console.log(responseData);\n        setIsLoading(false);\n        auth.login();\n      } catch (err) {\n        console.log(err);\n        setIsLoading(false);\n        setError(err.message||'Something went wrong, please try again');\n      }\n    }\n  }\n  return (\n    <Card className=\"authentication\">\n      {isLoading && <LoadingSpinner asOverlay/>}\n      <h2>Login Required</h2>\n      <hr />\n      <form onSubmit={authSubmitHandler}>\n        {!isLoginMode &&\n          <Input\n            element=\"input\"\n            id=\"name\"\n            type=\"text\"\n            label=\"Your Name\"\n            validators={[VALIDATOR_REQUIRE]}\n            errorText=\"Enter a name...\"\n            onInput={inputHandler}\n          />\n        }\n        <Input\n          element=\"input\"\n          id=\"email\"\n          type=\"email\"\n          label=\"E-Mail\"\n          validators={[VALIDATOR_EMAIL()]}\n          errorText=\"Please enter a valid email address.\"\n          onInput={inputHandler}\n        />\n        <Input\n          element=\"input\"\n          id=\"password\"\n          type=\"password\"\n          label=\"Password\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please enter a valid password, at least 5 characters.\"\n          onInput={inputHandler}\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n        </Button>\n      </form>\n      <Button inverse onClick={switchModeHandler}>\n        SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n      </Button>\n    </Card>\n  );\n};\n\nexport default Auth;"]},"metadata":{},"sourceType":"module"}